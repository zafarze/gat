# Generated by Django 5.2.6 on 2025-09-19 12:14

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('address', models.CharField(max_length=300)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Quarter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quarters', to='core.academicyear')),
            ],
            options={
                'ordering': ['-year__start_date', 'start_date'],
            },
        ),
        migrations.CreateModel(
            name='SchoolClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Полное название класса, например: 5А', max_length=10)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classes', to='core.school')),
            ],
            options={
                'ordering': ['school__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ClassSubject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_of_questions', models.PositiveIntegerField()),
                ('school_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.schoolclass')),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_id', models.CharField(max_length=50, unique=True)),
                ('last_name', models.CharField(max_length=100)),
                ('first_name', models.CharField(max_length=100)),
                ('school_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='core.schoolclass')),
            ],
            options={
                'ordering': ['school_class', 'last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('abbreviation', models.CharField(blank=True, max_length=50, null=True)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='core.school')),
            ],
            options={
                'ordering': ['school', 'name'],
                'unique_together': {('school', 'name')},
            },
        ),
        migrations.AddField(
            model_name='schoolclass',
            name='subjects',
            field=models.ManyToManyField(related_name='school_classes', through='core.ClassSubject', to='core.subject'),
        ),
        migrations.CreateModel(
            name='GatTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('test_number', models.PositiveIntegerField()),
                ('test_date', models.DateField()),
                ('quarter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gattests', to='core.quarter')),
                ('school_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gattests', to='core.schoolclass')),
                ('subjects', models.ManyToManyField(related_name='gat_tests', to='core.subject')),
            ],
            options={
                'ordering': ['-test_date'],
            },
        ),
        migrations.AddField(
            model_name='classsubject',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.subject'),
        ),
        migrations.CreateModel(
            name='StudentResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scores', models.JSONField()),
                ('gat_test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_results', to='core.gattest')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='core.student')),
            ],
            options={
                'ordering': ['gat_test', 'student'],
                'unique_together': {('student', 'gat_test')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='schoolclass',
            unique_together={('school', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='classsubject',
            unique_together={('school_class', 'subject')},
        ),
    ]
