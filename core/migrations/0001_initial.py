# Generated by Django 5.2.4 on 2025-10-20 20:19

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название')),
                ('start_date', models.DateField(verbose_name='Дата начала')),
                ('end_date', models.DateField(verbose_name='Дата окончания')),
            ],
            options={
                'verbose_name': 'Учебный год',
                'verbose_name_plural': 'Учебные годы',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('school_id', models.CharField(max_length=20, unique=True, verbose_name='ID Школы')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Название')),
                ('address', models.CharField(blank=True, max_length=300, verbose_name='Адрес')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='Город')),
            ],
            options={
                'verbose_name': 'Школа',
                'verbose_name_plural': 'Школы',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название предмета')),
                ('abbreviation', models.CharField(blank=True, max_length=10, null=True, verbose_name='Сокращение')),
            ],
            options={
                'verbose_name': 'Предмет',
                'verbose_name_plural': 'Предметы',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='University',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('city', models.CharField(max_length=100, verbose_name='Город')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('website', models.URLField(blank=True, verbose_name='Веб-сайт')),
            ],
            options={
                'verbose_name': 'Университет',
                'verbose_name_plural': 'Университеты',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Quarter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('start_date', models.DateField(verbose_name='Дата начала')),
                ('end_date', models.DateField(verbose_name='Дата окончания')),
                ('year', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='quarters', to='core.academicyear', verbose_name='Учебный год')),
            ],
            options={
                'verbose_name': 'Четверть',
                'verbose_name_plural': 'Четверти',
                'ordering': ['-year__start_date', 'start_date'],
            },
        ),
        migrations.CreateModel(
            name='GatTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('name', models.CharField(max_length=255, verbose_name='Название теста')),
                ('test_number', models.PositiveIntegerField(choices=[(1, 'GAT-1'), (2, 'GAT-2'), (3, 'GAT-3'), (4, 'GAT-4')], verbose_name='Номер GAT')),
                ('test_date', models.DateField(verbose_name='Дата проведения')),
                ('day', models.PositiveSmallIntegerField(choices=[(1, 'День 1'), (2, 'День 2')], default=1, verbose_name='День GAT')),
                ('quarter', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='gat_tests', to='core.quarter', verbose_name='Четверть')),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='gat_tests', to='core.school', verbose_name='Школа')),
            ],
            options={
                'verbose_name': 'GAT Тест',
                'verbose_name_plural': 'GAT Тесты',
                'ordering': ['-test_date', 'test_number', 'day'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('question_number', models.PositiveIntegerField(verbose_name='Номер вопроса')),
                ('text', models.TextField(blank=True, verbose_name='Текст вопроса')),
                ('points', models.PositiveIntegerField(default=1, verbose_name='Баллы')),
                ('gat_test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='core.gattest', verbose_name='Тест')),
                ('subject', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='questions', to='core.subject', verbose_name='Предмет')),
            ],
            options={
                'verbose_name': 'Вопрос',
                'verbose_name_plural': 'Вопросы',
                'ordering': ['gat_test', 'subject', 'question_number'],
            },
        ),
        migrations.CreateModel(
            name='AnswerOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('text', models.CharField(max_length=500, verbose_name='Текст ответа')),
                ('is_correct', models.BooleanField(default=False, verbose_name='Правильный ответ')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='core.question', verbose_name='Вопрос')),
            ],
            options={
                'verbose_name': 'Вариант ответа',
                'verbose_name_plural': 'Варианты ответа',
                'ordering': ['question', 'id'],
            },
        ),
        migrations.CreateModel(
            name='SchoolClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('name', models.CharField(help_text='Например: 5А или 10', max_length=10, verbose_name='Название класса')),
                ('homeroom_teacher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='homeroom_classes', to=settings.AUTH_USER_MODEL, verbose_name='Классный руководитель')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subclasses', to='core.schoolclass', verbose_name='Параллель')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classes', to='core.school', verbose_name='Школа')),
            ],
            options={
                'verbose_name': 'Класс / Параллель',
                'verbose_name_plural': 'Классы и Параллели',
                'ordering': ['school__name', 'name'],
            },
        ),
        migrations.AddField(
            model_name='gattest',
            name='school_class',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='gat_tests', to='core.schoolclass', verbose_name='Класс'),
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('student_id', models.CharField(max_length=50, unique=True, verbose_name='ID ученика')),
                ('status', models.CharField(choices=[('ACTIVE', 'Активен'), ('TRANSFERRED', 'Переведен'), ('GRADUATED', 'Выпустился')], default='ACTIVE', max_length=15, verbose_name='Статус')),
                ('last_name_ru', models.CharField(max_length=100, verbose_name='Фамилия (рус.)')),
                ('first_name_ru', models.CharField(max_length=100, verbose_name='Имя (рус.)')),
                ('last_name_tj', models.CharField(blank=True, max_length=100, verbose_name='Насаб (точ.)')),
                ('first_name_tj', models.CharField(blank=True, max_length=100, verbose_name='Ном (точ.)')),
                ('last_name_en', models.CharField(blank=True, max_length=100, verbose_name='Surname (eng.)')),
                ('first_name_en', models.CharField(blank=True, max_length=100, verbose_name='Name (eng.)')),
                ('school_class', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='students', to='core.schoolclass', verbose_name='Класс')),
            ],
            options={
                'verbose_name': 'Ученик',
                'verbose_name_plural': 'Ученики',
                'ordering': ['school_class', 'last_name_ru', 'first_name_ru'],
            },
        ),
        migrations.CreateModel(
            name='StudentResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('total_score', models.PositiveIntegerField(db_index=True, default=0, verbose_name='Общий балл')),
                ('scores_by_subject', models.JSONField(blank=True, default=dict, verbose_name='Баллы по предметам')),
                ('gat_test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='core.gattest', verbose_name='GAT тест')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='core.student', verbose_name='Ученик')),
            ],
            options={
                'verbose_name': 'Результат ученика',
                'verbose_name_plural': 'Результаты учеников',
                'ordering': ['-gat_test__test_date', '-total_score'],
            },
        ),
        migrations.CreateModel(
            name='StudentAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('is_correct', models.BooleanField(default=False, verbose_name='Ответ верный')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_answers', to='core.question', verbose_name='Вопрос')),
                ('result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='core.studentresult', verbose_name='Общий результат')),
            ],
            options={
                'verbose_name': 'Ответ ученика',
                'verbose_name_plural': 'Ответы учеников',
                'ordering': ['result', 'question__question_number'],
            },
        ),
        migrations.CreateModel(
            name='QuestionCount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('number_of_questions', models.PositiveIntegerField(default=10, verbose_name='Количество вопросов')),
                ('school_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_counts', to='core.schoolclass', verbose_name='Класс')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_counts', to='core.subject', verbose_name='Предмет')),
            ],
            options={
                'verbose_name': 'Количество вопросов',
                'verbose_name_plural': 'Количества вопросов',
                'ordering': ['school_class__school__name', 'school_class__name', 'subject__name'],
            },
        ),
        migrations.AddField(
            model_name='gattest',
            name='subjects',
            field=models.ManyToManyField(to='core.subject', verbose_name='Предметы в тесте'),
        ),
        migrations.CreateModel(
            name='TeacherNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('note', models.TextField(verbose_name='Текст заметки')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authored_notes', to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='core.student', verbose_name='Студент')),
            ],
            options={
                'verbose_name': 'Заметка преподавателя',
                'verbose_name_plural': 'Заметки преподавателей',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('name', models.CharField(max_length=200, verbose_name='Название темы')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topics', to='core.subject', verbose_name='Предмет')),
            ],
            options={
                'verbose_name': 'Тема',
                'verbose_name_plural': 'Темы',
                'ordering': ['subject', 'name'],
            },
        ),
        migrations.AddField(
            model_name='question',
            name='topic',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.topic', verbose_name='Тема'),
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('required_subjects', models.ManyToManyField(to='core.subject', verbose_name='Требуемые предметы')),
                ('university', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='faculties', to='core.university', verbose_name='Университет')),
            ],
            options={
                'verbose_name': 'Факультет',
                'verbose_name_plural': 'Факультеты',
                'ordering': ['university', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('message', models.CharField(max_length=255, verbose_name='Сообщение')),
                ('is_read', models.BooleanField(db_index=True, default=False, verbose_name='Прочитано')),
                ('link', models.URLField(blank=True, max_length=255, null=True, verbose_name='Ссылка')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Уведомление',
                'verbose_name_plural': 'Уведомления',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'is_read'], name='core_notifi_user_id_cb8f07_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='quarter',
            constraint=models.UniqueConstraint(fields=('name', 'year'), name='unique_quarter_name_per_year'),
        ),
        migrations.AddConstraint(
            model_name='schoolclass',
            constraint=models.UniqueConstraint(fields=('school', 'name'), name='unique_class_name_per_school'),
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['student_id'], name='core_studen_student_fa4380_idx'),
        ),
        migrations.AddConstraint(
            model_name='studentresult',
            constraint=models.UniqueConstraint(fields=('student', 'gat_test'), name='unique_result_per_student_test'),
        ),
        migrations.AddConstraint(
            model_name='studentanswer',
            constraint=models.UniqueConstraint(fields=('result', 'question'), name='unique_answer_per_result_question'),
        ),
        migrations.AddConstraint(
            model_name='questioncount',
            constraint=models.UniqueConstraint(fields=('school_class', 'subject'), name='unique_question_count_per_class_subject'),
        ),
        migrations.AddIndex(
            model_name='teachernote',
            index=models.Index(fields=['student', 'created_at'], name='core_teache_student_b67404_idx'),
        ),
        migrations.AddConstraint(
            model_name='topic',
            constraint=models.UniqueConstraint(fields=('subject', 'name'), name='unique_topic_per_subject'),
        ),
        migrations.AddConstraint(
            model_name='question',
            constraint=models.UniqueConstraint(fields=('gat_test', 'subject', 'question_number'), name='unique_question_number_per_test_subject'),
        ),
    ]
